class Paletteron{static MAX_COLORS_AMOUNT=16777216;static MAX_COLORS_SPACE_DISTANCE=443.405;constructor(t,e,a,r,s){switch(t&&(t<1||t>Paletteron.MAX_COLORS_AMOUNT)&&(t=5),a&&(a<0||a>1)&&(a=0),r&&(r<0||r>1)&&(r=0),s&&(s<0||s>1)&&(s=0),this.colorsToPick=t||5,this.speed=e||"medium",this.minCoverage=a||0,this.minWhiteDistance=r||0,this.minBlackDistance=s||0,this.speed){case"fast":this.averageColorDistanceJump=8,this.scale=.2;break;case"medium":this.averageColorDistanceJump=5,this.scale=.3;break;case"slow":this.averageColorDistanceJump=3,this.scale=.5;break;default:this.averageColorDistanceJump=5,this.scale=.3}}getPalette(t,e=!1){e&&(t.crossOrigin="anonymous");const[a,r]=this.downscale(t),s=this.extractPixels(r),o=this.flattenColors(s),n=this.removeBrightDarkColors(o),i=this.removeLowCoverageColors(n,s.length),c=this.bundleColors(i),l=this.calculateScore(c),h=this.finalizeColors(l);return a.remove(),h}printDebuggingPalette(t,e){e.innerHTML="";for(const a of t){const t=document.createElement("div");t.style.backgroundColor=`rgb(${a[0]}, ${a[1]}, ${a[2]})`;const r=document.createTextNode(`rgb(${a[0]}, ${a[1]}, ${a[2]})`);t.appendChild(r),e.appendChild(t)}}downscale(t){const e=t.width*this.scale,a=t.height*this.scale,r=document.createElement("canvas");r.width=e,r.height=a;const s=r.getContext("2d");return s.drawImage(t,0,0,e,a),[r,s]}removeBrightDarkColors(t){return 0===this.minBlackDistance&&0===this.minWhiteDistance?t:t.filter((t=>{const e=Paletteron.MAX_COLORS_SPACE_DISTANCE*this.minBlackDistance,a=Paletteron.MAX_COLORS_SPACE_DISTANCE*this.minWhiteDistance;return this.calculateDistance([t.r,t.g,t.b],[255,255,255])>a&&this.calculateDistance([t.r,t.g,t.b],[0,0,0])>e}))}extractPixels(t){const e=new Array(256).fill(0).map((()=>new Array(256).fill(0).map((()=>new Array(256).fill(0))))),a=t.getImageData(0,0,t.canvas.width,t.canvas.height);for(let t=0;t<a.data.length;t+=4){const r=a.data[t],s=a.data[t+1],o=a.data[t+2];e[r][s][o]++}return e}flattenColors(t){const e=[];for(let a=0;a<t.length;a++)for(let r=0;r<t[a].length;r++)for(let s=0;s<t[a][r].length;s++){const o=t[a][r][s];o>0&&e.push({r:a,g:r,b:s,amount:o,score:0})}return e}removeLowCoverageColors(t,e){const a=e*this.minCoverage;return t.filter((t=>t.amount>=a))}findAverageColorDistance(t){let e=0,a=0;for(let r=0;r<t.length+this.averageColorDistanceJump;r+=this.averageColorDistanceJump)for(let s=r+this.averageColorDistanceJump;s<t.length;s+=this.averageColorDistanceJump)e+=this.calculateDistance([t[r].r,t[r].g,t[r].b],[t[s].r,t[s].g,t[s].b]),a++;return e/a}bundleColors(t){const e=this.findAverageColorDistance(t);t.sort(((t,e)=>e.amount-t.amount));for(let a=0;a<t.length;a++)for(let r=a+1;r<t.length;r++)if(this.calculateDistance([t[a].r,t[a].g,t[a].b],[t[r].r,t[r].g,t[r].b])<e){const s=this.calculateDistance([t[a].r,t[a].g,t[a].b],[t[r].r,t[r].g,t[r].b])/e;t[a].amount+=t[r].amount*s,t.splice(r,1),r--}return t}calculateDistance(t,e){const a=t[0]-e[0],r=t[1]-e[1],s=t[2]-e[2];return Math.sqrt(a*a+r*r+s*s)}findColorsCenter(t,e){e||(e=t.length);let a=[0,0,0];for(let r=0;r<e;r++)a[0]+=t[r].r,a[1]+=t[r].g,a[2]+=t[r].b;return a[0]/=e,a[1]/=e,a[2]/=e,a}calculateAverageDistanceToCenter(t){const e=this.findColorsCenter(t);let a=0;for(const r of t)a+=this.calculateDistance([r.r,r.g,r.b],e);return a/t.length}calculateScore(t){const e=t.reduce(((t,e)=>t+e.amount),0),a=this.findColorsCenter(t),r=this.calculateAverageDistanceToCenter(t);for(const s of t)s.score+=s.amount/e,s.score+=this.calculateDistance([s.r,s.g,s.b],a)/r*Math.log(s.amount);return t.sort(((t,e)=>e.score-t.score)),t}finalizeColors(t){t.sort(((t,e)=>e.score-t.score));return(t=t.slice(0,this.colorsToPick)).map((t=>[t.r,t.g,t.b]))}}