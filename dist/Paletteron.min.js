class Paletteron{static MAX_COLORS_AMOUNT=16777216;static MAX_COLORS_SPACE_DISTANCE=443.405;constructor(t,e,r,n,o){if(t&&(t<0||t>1))throw new Error("Scale must be between 0 and 1.");if(e&&(e<1||e>Paletteron.MAX_COLORS_AMOUNT))throw new Error(`Colors to pick must be between 1 and ${Paletteron.MAX_COLORS_AMOUNT}.`);if(r&&(r<0||r>1))throw new Error("Min coverage must be between 0 and 1.");if(n&&(n<0||n>1))throw new Error("Ignore bright must be between 0 and 1.");if(o&&(o<0||o>1))throw new Error("Ignore dark must be between 0 and 1.");this.scale=t||.2,this.colorsToPick=e||5,this.minCoverage=r||0,this.minWhiteDistance=n||0,this.minBlackDistance=o||0}getPalette(t,e=!1){e&&(t.crossOrigin="anonymous");const[r,n]=this.downscale(t),o=this.extractPixels(n),a=this.flattenColors(o),s=this.removeBrightDarkColors(a),i=this.bundleColors(s),l=this.removeLowCoverageColors(i,o.length),c=this.calculateScore(l),h=this.finalizeColors(c);return r.remove(),h}printDebuggingPalette(t,e){e.innerHTML="";for(const r of t){const t=document.createElement("div");t.style.backgroundColor=`rgb(${r[0]}, ${r[1]}, ${r[2]})`;const n=document.createTextNode(`rgb(${r[0]}, ${r[1]}, ${r[2]})`);t.appendChild(n),e.appendChild(t)}}downscale(t){const e=t.width*this.scale,r=t.height*this.scale,n=document.createElement("canvas");n.width=e,n.height=r;const o=n.getContext("2d");return o.drawImage(t,0,0,e,r),document.body.appendChild(n),n.style.position="fixed",n.style.top="9999px",n.style.left="9999px",[n,o]}removeBrightDarkColors(t){return 0===this.minBlackDistance&&0===this.minWhiteDistance?t:t.filter((t=>{const e=Paletteron.MAX_COLORS_SPACE_DISTANCE*this.minBlackDistance,r=Paletteron.MAX_COLORS_SPACE_DISTANCE*this.minWhiteDistance;return this.calculateDistance([t.r,t.g,t.b],[255,255,255])>r&&this.calculateDistance([t.r,t.g,t.b],[0,0,0])>e}))}extractPixels(t){const e=new Array(256).fill(0).map((()=>new Array(256).fill(0).map((()=>new Array(256).fill(0))))),r=t.getImageData(0,0,t.canvas.width,t.canvas.height);for(let t=0;t<r.data.length;t+=4){const n=r.data[t],o=r.data[t+1],a=r.data[t+2];e[n][o][a]++}return e}flattenColors(t){const e=[];for(let r=0;r<t.length;r++)for(let n=0;n<t[r].length;n++)for(let o=0;o<t[r][n].length;o++){const a=t[r][n][o];a>0&&e.push({r:r,g:n,b:o,amount:a,score:0})}return e}removeLowCoverageColors(t,e){const r=e*this.minCoverage;return t.filter((t=>t.amount>=r))}findAverageColorDistance(t){let e=0,r=0;for(let n=0;n<t.length;n++)for(let o=n+1;o<t.length;o++)e+=this.calculateDistance([t[n].r,t[n].g,t[n].b],[t[o].r,t[o].g,t[o].b]),r++;return e/r}bundleColors(t){t.sort(((t,e)=>e.amount-t.amount));const e=this.findAverageColorDistance(t);for(let r=0;r<t.length;r++)for(let n=r+1;n<t.length;n++)if(this.calculateDistance([t[r].r,t[r].g,t[r].b],[t[n].r,t[n].g,t[n].b])<e){const o=this.calculateDistance([t[r].r,t[r].g,t[r].b],[t[n].r,t[n].g,t[n].b])/e;t[r].amount+=t[n].amount*o,t.splice(n,1),n--}return t}calculateDistance(t,e){const r=t[0]-e[0],n=t[1]-e[1],o=t[2]-e[2];return Math.sqrt(r*r+n*n+o*o)}findColorsCenter(t,e){e||(e=t.length);let r=[0,0,0];for(let n=0;n<e;n++)r[0]+=t[n].r,r[1]+=t[n].g,r[2]+=t[n].b;return r[0]/=e,r[1]/=e,r[2]/=e,r}calculateAverageDistanceToCenter(t){const e=this.findColorsCenter(t);let r=0;for(const n of t)r+=this.calculateDistance([n.r,n.g,n.b],e);return r/t.length}calculateScore(t){const e=t.reduce(((t,e)=>t+e.amount),0),r=this.findColorsCenter(t),n=this.calculateAverageDistanceToCenter(t);for(const o of t)o.score+=o.amount/e,o.score+=this.calculateDistance([o.r,o.g,o.b],r)/n*Math.log(o.amount);return t.sort(((t,e)=>e.score-t.score)),t}finalizeColors(t){t.sort(((t,e)=>e.score-t.score));return(t=t.slice(0,this.colorsToPick)).map((t=>[t.r,t.g,t.b]))}}